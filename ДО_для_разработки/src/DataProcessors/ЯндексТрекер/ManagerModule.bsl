Процедура СинхронизироватьЗадачи() Экспорт
	
	
	
	ЗагрузитьЗадачи();
		
КонецПроцедуры

Функция ОтправитьЗапросНаСервер(ТипЗапроса, Метод, ПараметрыЗапроса)
	
	Токен = Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.Токен;
	ИдОрганизации = Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.ИдОрганизации;
			
	Соединение = Новый HTTPСоединение("api.tracker.yandex.net", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = Метод;
	Запрос.Заголовки.Вставить("Authorization", СтрШаблон("OAuth %1", Токен));
	Запрос.Заголовки.Вставить("X-Org-Id", ИдОрганизации);
	
	Если НЕ ПараметрыЗапроса = Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(ПараметрыЗапроса);
	КонецЕсли;
	
	ОтветСервера = Соединение.ВызватьHTTPМетод(ТипЗапроса, Запрос);
	
	Возврат ОтветСервера.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
КонецФункции

Функция СериализоватьJSON(СтрокаДанных)
	
	СериализованныеДанные = Неопределено;
	
	Попытка 
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаДанных);
		СериализованныеДанные = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СериализованныеДанные;	
	
КонецФункции

Функция СформироватьСтрокуJSON(МассивДанных)
	
	СтрокаJSON = "";
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(,Символы.Таб,, ЭкранированиеСимволовJSON.СимволыВнеBMP);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи) ; 
	Попытка
		ЗаписатьJSON(ЗаписьJSON, МассивДанных); 
		СтрокаJSON = ЗаписьJSON.Закрыть();         
	Исключение
		
	КонецПопытки;
	
	Возврат СтрокаJSON;

КонецФункции

Процедура ЗагрузитьЗадачи()
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("Решен", СтатусРешен());
	СоответствиеСтатусов.Вставить("Закрыт", СтатусЗакрыт());
	СоответствиеСтатусов.Вставить("Открыт", СтатусОткрыт());
	
	СоответствиеТиповЗадач = Новый Соответствие;
	СоответствиеТиповЗадач.Вставить("Задача", ТипЗадачиЗадача());
	СоответствиеТиповЗадач.Вставить("История", ТипЗадачиStory());
	СоответствиеТиповЗадач.Вставить("Эпик", ТипЗадачиЭпик());
	СоответствиеТиповЗадач.Вставить("Модификация", ТипЗадачиModify());
	СоответствиеТиповЗадач.Вставить("Ошибка", ТипЗадачиОшибка());
		
	МассивПроектов = ПолучитьМассивПроектов();
	
	МассивЗадачБезРодителя = Новый Массив;
	
	Для Каждого Проект Из МассивПроектов Цикл
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("filter", Новый Структура("queue", Проект));
		
		РезультатЗапроса = ОтправитьЗапросНаСервер("POST", "/v2/issues/_search", СформироватьСтрокуJSON(ПараметрыЗапроса));
		МассивЗадач = СериализоватьJSON(РезультатЗапроса);
		
		Если МассивЗадач = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		Для Каждого Задача Из МассивЗадач Цикл
			// Получаем подробные данные задачи
			РезультатЗапроса = ОтправитьЗапросНаСервер("GET", СтрШаблон("/v2/issues/%1", Задача.id), Неопределено);
			ДанныеЗадачи = СериализоватьJSON(РезультатЗапроса);
						
			Если ДанныеЗадачи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				СоздатьЗадачу(ДанныеЗадачи, МассивЗадачБезРодителя, СоответствиеСтатусов, СоответствиеТиповЗадач);
			Исключение
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивПроектов()
	
	МассивПроектов = Новый Массив;
	
	РезультатЗапроса = ОтправитьЗапросНаСервер("GET", "/v2/queues", Неопределено);
	МассивОчередей = СериализоватьJSON(РезультатЗапроса);
	
	Если МассивОчередей = Неопределено Тогда
		Возврат МассивПроектов;
	КонецЕсли;
	
	Для Каждого Очередь ИЗ МассивОчередей Цикл
		МассивПроектов.Добавить(Очередь.id);
		
		Если ОбъектУжеЗагружен("Я_ИдОчереди (Общий)", Строка(Очередь.id)) Тогда
			Продолжить;
		КонецЕсли;
				
		СоздатьПроект(Очередь);			
	КонецЦикла;
	
	Возврат МассивПроектов;

КонецФункции

Процедура СоздатьПроект(Очередь)
	
	Проект = Справочники.Проекты.СоздатьЭлемент();
	Проект.Наименование = Очередь.name;
	Проект.ВидПроекта = Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.ВидПроекта;
	Проект.ТекущийПланНачало = ТекущаяДатаСеанса();
	Проект.ТекущийПланОкончание = КонецГода(ТекущаяДатаСеанса());
	Проект.Подразделение = Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.Подразделение;
	Проект.Руководитель = Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.Руководитель;
	Проект.Состояние = Перечисления.СостоянияПроектов.Инициирован;
	Проект.Папка = Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.Папка;
	Проект.СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта;
	Проект.ЕдиницаТрудозатратЗадач = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
	Проект.ЕдиницаДлительностиЗадач = Перечисления.ЕдиницыДлительности.Час;
	Проект.АвтоматическиРассчитыватьПланПроекта = Истина;
	Проект.СписыватьЗатратыНаПроект = Истина;
		
	Попытка 
		Проект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	УстановитьЗначениеСвойстваОбъекта(Проект.Ссылка, "Я_ИдОчереди (Общий)", Строка(Очередь.id));
	
КонецПроцедуры

Процедура СоздатьЗадачу(ДанныеЗадачи, МассивЗадачБезРодителя, СоответствиеСтатусов, СоответствиеТиповЗадач)
	
	ЗадачаПервогоУровня = Неопределено;
	ЗадачаВторогоУровня = Неопределено;
	ЗадачаТретьегоУровня = Неопределено;
	
	ИмяСвойстваПроект = "Я_ИдПроекта (Общий)";
	ИмяСвойстваКомпонент = "Я_ИдКомпонента (Общий)";
	ИмяСвойстваТег = "Я_Тег (Общий)";
	ИмяСвойстваЗадача = "Я_ИдЗадачи (Общий)";
	ИмяСвойстваДатаИзменения = "Я_ДатаИзменения (Общий)";
		
	// Если задача уже есть и не изменялась, ничего не делаем
	ЗадачаПоследнегоУровня = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваЗадача, ДанныеЗадачи.id);
	
	Если НЕ ЗадачаПоследнегоУровня = Неопределено Тогда
		ДатаТрекер = ДанныеЗадачи.updatedAt;
		ДатаДО = ПолучитьЗначениеСвойстваОбъекта(ЗадачаПоследнегоУровня, ИмяСвойстваДатаИзменения);
		Если ДатаТрекер = ДатаДО Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПодчиненнаяЗадача = Ложь;	
	РодительКонечнойЗадачи = Неопределено;
	
	ИдентификаторОчереди = Строка(ДанныеЗадачи.queue.id);
	ИдентификаторПроекта = ?(ДанныеЗадачи.Свойство("project"), Строка(ДанныеЗадачи.project.id), "");
	ИдентификаторКомпонента = ?(ДанныеЗадачи.Свойство("components"), Строка(ДанныеЗадачи.components[0].id), "");
	
	ИдентификаторТега = ?(ДанныеЗадачи.Свойство("tags"), СтрШаблон("%1_%2", ИдентификаторОчереди, ДанныеЗадачи.tags[0]), ""); 
	ИдентификаторЗадачи = ДанныеЗадачи.id;
	
	// Достаем связи задачи, если есть связь, то родитель создаваемой задачи будет задача в поле 
	// object, очереди компоненты и теги не учитываем.
	Результат = ОтправитьЗапросНаСервер("GET", СтрШаблон("/v2/issues/%1/links", ДанныеЗадачи.id), Неопределено);
	_массивСвязей = СериализоватьJSON(Результат);      
	
	РодительИзСвязей = Неопределено;
	
	Если _массивСвязей.Количество() > 0 Тогда
		Для Каждого _связь Из _массивСвязей Цикл		
			Если _связь.direction = "inward" Тогда
				РодительКонечнойЗадачи = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваЗадача, _связь.object.id);
				
				// Если такой задачи еще нет в ДО, создадим, рекурсия %)
				Если НЕ ЗначениеЗаполнено(РодительКонечнойЗадачи) Тогда
					// Получаем подробные данные задачи
					_запросВышестоящейЗадачи = ОтправитьЗапросНаСервер("GET", СтрШаблон("/v2/issues/%1", _связь.object.id), Неопределено);
					_данныеВышестоящейЗадачи = СериализоватьJSON(_запросВышестоящейЗадачи);
					
					СоздатьЗадачу(_данныеВышестоящейЗадачи, МассивЗадачБезРодителя, СоответствиеСтатусов, СоответствиеТиповЗадач);
					
					РодительКонечнойЗадачи = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваЗадача, _связь.object.id);
				КонецЕсли;
				РодительИзСвязей = РодительКонечнойЗадачи;
				Прервать;		
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	// Смотрим, есть ли проект у задачи (1й уровень иерархии это проект в Яндекс-трекере, в ДО это проектная задача)
	Если ЗначениеЗаполнено(ИдентификаторПроекта) Тогда
		ЗадачаПервогоУровня = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваПроект, ИдентификаторПроекта);
		
		Если ЗадачаПервогоУровня = Неопределено Тогда
			ЗадачаПервогоУровня = СоздатьПроектнуюЗадачу(ИдентификаторОчереди, ДанныеЗадачи.project.display, 
			ИмяСвойстваПроект, ДанныеЗадачи.project.id, Неопределено, Неопределено, ДанныеЗадачи.status.display, 
			ДанныеЗадачи.type.display, СоответствиеСтатусов, СоответствиеТиповЗадач);
		КонецЕсли;	
		
		РодительКонечнойЗадачи = ЗадачаПервогоУровня;
	КонецЕсли;
	
	// Дальше идем по компонентам (2й уровень иерархии это компонент в Яндекс-трекере, в ДО это проектная задача, родитель которой 1й уровень)
	Если ЗначениеЗаполнено(ИдентификаторКомпонента) И ЗначениеЗаполнено(ИдентификаторПроекта) Тогда
		Компонента = ДанныеЗадачи.components[0];
		
		// Если есть задача 1 уровня ищем по владельцу и компоненте
		Если НЕ ЗадачаПервогоУровня = Неопределено Тогда
			ЗадачаВторогоУровня = ПолучитьПроектнуюЗадачуПоРодителю(ИмяСвойстваКомпонент, ИдентификаторКомпонента, ЗадачаПервогоУровня);
			// Если нету - только по тегу	
		Иначе
			ЗадачаВторогоУровня = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваКомпонент, ИдентификаторКомпонента);
		КонецЕсли;
		
		Если ЗадачаВторогоУровня = Неопределено Тогда
			ЗадачаВторогоУровня = СоздатьПроектнуюЗадачу(ИдентификаторОчереди, Компонента.display,
			ИмяСвойстваКомпонент, ИдентификаторКомпонента, ЗадачаПервогоУровня, Неопределено, ДанныеЗадачи.status.display, 
			ДанныеЗадачи.type.display, СоответствиеСтатусов, СоответствиеТиповЗадач); 	
		КонецЕсли;
		
		РодительКонечнойЗадачи = ЗадачаВторогоУровня;	
	КонецЕсли;
	//КонецЕсли;	
	// 3й уровень
		//Если ЗначениеЗаполнено(ИдентификаторТега) И ЗначениеЗаполнено(ИдентификаторКомпонента) Тогда
		//	// Я_Тег (Общий)
		//	ТегЗадачи = ДанныеЗадачи.tags[0];
		//	
		//	// Если есть задача 2 уровня ищем по владельцу и тегу
		//	Если НЕ ЗадачаВторогоУровня = Неопределено Тогда
		//		ЗадачаТретьегоУровня = ПолучитьПроектнуюЗадачуПоРодителю(ИмяСвойстваТег, ИдентификаторТега, ЗадачаВторогоУровня);
		//		// Если нету - только по тегу	
		//	Иначе
		//		ЗадачаТретьегоУровня = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваТег, ИдентификаторТега);
		//	КонецЕсли;
		//	
		//	Если ЗадачаТретьегоУровня = Неопределено Тогда
		//		ЗадачаТретьегоУровня = СоздатьПроектнуюЗадачу(ИдентификаторОчереди, ТегЗадачи,
		//		ИмяСвойстваТег, ИдентификаторТега, ЗадачаВторогоУровня, Неопределено, 
		//		ДанныеЗадачи.status.display, ДанныеЗадачи.type.display, СоответствиеСтатусов, СоответствиеТиповЗадач);
		//	КонецЕсли;
		//	
		//	РодительКонечнойЗадачи = ЗадачаТретьегоУровня;	
		//КонецЕсли;
		
		// Косяк структуры - пихаем в 1й уровень
	
		Если (НЕ ЗадачаТретьегоУровня = Неопределено) И (ЗадачаВторогоУровня = Неопределено ИЛИ ЗадачаПервогоУровня = Неопределено) Тогда
			РодительКонечнойЗадачи = Неопределено;
		КонецЕсли;
		
		Если (НЕ ЗадачаВторогоУровня = Неопределено) И (ЗадачаПервогоУровня = Неопределено) Тогда
			РодительКонечнойЗадачи = Неопределено;
		КонецЕсли;
	//КонецЕсли;

	// Последний уровень иерархии это задача в Яндекс трекере, в ДО проектная задача, родитель которой 3й уровень
	ЗадачаПоследнегоУровня = ПолучитьОбъектПоЗначениюСвойство(ИмяСвойстваЗадача, ИдентификаторЗадачи);
	
	Если ЗначениеЗаполнено(РодительИзСвязей) Тогда
		РодительКонечнойЗадачи = РодительИзСвязей;
	КонецЕсли;
		
	Если ЗадачаПоследнегоУровня = Неопределено Тогда
		ИмяЗадачи = СтрШаблон("%1 - %2", ДанныеЗадачи.key, ДанныеЗадачи.summary);
		ОписаниеЗадачи = ?(ДанныеЗадачи.Свойство("description"), ДанныеЗадачи.description, Неопределено);
		
		ПроектанаяЗадача = СоздатьПроектнуюЗадачу(ИдентификаторОчереди, ИмяЗадачи, ИмяСвойстваЗадача, ИдентификаторЗадачи,
		РодительКонечнойЗадачи, ОписаниеЗадачи, ДанныеЗадачи.status.display, ДанныеЗадачи.type.display, СоответствиеСтатусов, СоответствиеТиповЗадач);
	Иначе
		ДатаТрекер = ДанныеЗадачи.updatedAt;
		ДатаДО = ПолучитьЗначениеСвойстваОбъекта(ЗадачаПоследнегоУровня, ИмяСвойстваДатаИзменения);
		
		Если ДатаТрекер <> ДатаДО Тогда
			ВладелецЗадачи = ПолучитьОбъектПоЗначениюСвойство("Я_ИдОчереди (Общий)", ИдентификаторОчереди);
			ОбновитьПроектнуюЗадачу(ЗадачаПоследнегоУровня, ВладелецЗадачи, РодительКонечнойЗадачи, ДанныеЗадачи, ИмяСвойстваДатаИзменения, 
			СоответствиеСтатусов, СоответствиеТиповЗадач);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПроектнуюЗадачу(ИдПроекта, НаименованиеЗадачи, ИмяСвойства, ЗначениеСвойства, Родитель, ОписаниеЗадачи, СтатусЗадачи, ТипЗадачи, СоответствиеСтатусов, СоответствиеТиповЗадач)
	
	НачалоЗадачи = ТекущаяДатаСеанса();
	ОкончаниеЗадачи = НачалоЗадачи + 3600 * Справочники.Яндекс_НастройкиСинхронизации.НастройкиПоУмолчанию.ДлительностьДней;
	ДлительностьЗадачи = Окр(((ОкончаниеЗадачи - НачалоЗадачи) / 3600), 0);
	ЕдиницаДлительности =  Перечисления.ЕдиницыДлительности.Час;
	
	ПроектнаяЗадача = Справочники.ПроектныеЗадачи.СоздатьЭлемент();
	ПроектнаяЗадача.Наименование = НаименованиеЗадачи;
	ПроектнаяЗадача.Владелец = ПолучитьОбъектПоЗначениюСвойство("Я_ИдОчереди (Общий)", ИдПроекта);
	ПроектнаяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	ПроектнаяЗадача.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
	ПроектнаяЗадача.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
	
	Если НЕ Родитель = Неопределено Тогда
		ПроектнаяЗадача.Родитель = Родитель;
	КонецЕсли;
	
	Если НЕ ОписаниеЗадачи = Неопределено Тогда
		ПроектнаяЗадача.Описание = ОписаниеЗадачи;
	КонецЕсли;
	
	ДанныеКода = РаботаСПроектами.ПолучитьКодСДРИНомерЗадачиВУровне(ПроектнаяЗадача.Владелец, 
		ПроектнаяЗадача.Родитель);
		
	ПроектнаяЗадача.КодСДР = ДанныеКода.КодСДР;
	ПроектнаяЗадача.НомерЗадачиВУровне = ДанныеКода.НомерЗадачиВУровне;
	
	ПроектнаяЗадача.ЕдиницаТрудозатратФакт = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
	ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
	ПроектнаяЗадача.ТекущийПланТрудозатраты = 0;
	
	// Статус
	нстр = ПроектнаяЗадача.ДополнительныеРеквизиты.Добавить();
	нстр.свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статус");
	Если СтатусЗадачи = "Решен" тогда
		нстр.значение = СоответствиеСтатусов.Получить("Решен");
	иначеЕсли СтатусЗадачи = "Закрыт" тогда
		нстр.значение = СоответствиеСтатусов.Получить("Закрыт");
	иначе
		нстр.значение = СоответствиеСтатусов.Получить("Открыт");
	конецесли;
	
	// Тип задачи
	нстр = ПроектнаяЗадача.ДополнительныеРеквизиты.Добавить();
	нстр.свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"); 
	Если ТипЗадачи = "Задача" тогда
		нстр.значение = СоответствиеТиповЗадач.Получить("Задача");
	ИначеЕсли ТипЗадачи = "Story" тогда
		нстр.значение = СоответствиеТиповЗадач.Получить("История");
	ИначеЕсли ТипЗадачи = "Epic" тогда
		нстр.значение = СоответствиеТиповЗадач.Получить("Эпик");
	ИначеЕсли ТипЗадачи = "Модификация системы" тогда
		нстр.значение = СоответствиеТиповЗадач.Получить("Модификация");
	ИначеЕсли ТипЗадачи = "Ошибка" тогда
		нстр.значение = СоответствиеТиповЗадач.Получить("Ошибка");
	Конецесли;
		
	Попытка 
		ПроектнаяЗадача.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НачалоФакт", Дата(1,1,1));
	СтруктураДанных.Вставить("ОкончаниеФакт", Дата(1,1,1));
	СтруктураДанных.Вставить("ДлительностьФакт", 0);
	СтруктураДанных.Вставить("ЕдиницаДлительностиФакт", ЕдиницаДлительности);
	
	СтруктураДанных.Вставить("ТекущийПланНачало", НачалоЗадачи);
	СтруктураДанных.Вставить("ТекущийПланОкончание", ОкончаниеЗадачи);
	СтруктураДанных.Вставить("ТекущийПланДлительность", ДлительностьЗадачи);
	СтруктураДанных.Вставить("ТекущийПланЕдиницаДлительности", ЕдиницаДлительности);
		
	РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ПроектнаяЗадача.Ссылка, СтруктураДанных);	
	
	УстановитьЗначениеСвойстваОбъекта(ПроектнаяЗадача.Ссылка, ИмяСвойства, ЗначениеСвойства);
	
	РаботаСПроектами.РассчитатьПланПроекта(ПроектнаяЗадача.Ссылка, Новый Массив);
	 	
	Возврат ПроектнаяЗадача.Ссылка;

КонецФункции

Функция ОбновитьПроектнуюЗадачу(ЗадачаСсылка, Владелец, Родитель, ДанныеЗадачи, ИмяСвойстваДатаИзменения, СоответствиеСтатусов, СоответствиеТиповЗадач)
	
	ПроектнаяЗадача = ЗадачаСсылка.ПолучитьОбъект();
	
	ПроектнаяЗадача.Наименование = СтрШаблон("%1 - %2", ДанныеЗадачи.key, ДанныеЗадачи.summary);
	ПроектнаяЗадача.Владелец = Владелец;
	
	Если НЕ Родитель = Неопределено Тогда
		ПроектнаяЗадача.Родитель = Родитель;
	КонецЕсли;
	
	ПроектнаяЗадача.Описание = ?(ДанныеЗадачи.Свойство("description"), ДанныеЗадачи.description, "");
	
	// 06042020
	ДопреквизитНайден = Ложь;
	Для каждого ДопРекв из ПроектнаяЗадача.ДополнительныеРеквизиты цикл
		если допрекв.свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статус") тогда
			Если ДанныеЗадачи.status.display = "Решен" тогда
				Допрекв.значение = СоответствиеСтатусов.Получить("Решен");
			иначеЕсли ДанныеЗадачи.status.display = "Закрыт" тогда
				Допрекв.значение = СоответствиеСтатусов.Получить("Закрыт");
			иначе
				Допрекв.значение = СоответствиеСтатусов.Получить("Открыт");
			конецесли;
			
			ДопреквизитНайден = истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДопреквизитНайден = Ложь Тогда
		нстр = ПроектнаяЗадача.ДополнительныеРеквизиты.Добавить();
		нстр.свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статус");
		Если ДанныеЗадачи.status.display = "Решен" тогда
			нстр.значение = СоответствиеСтатусов.Получить("Решен");
		иначеЕсли ДанныеЗадачи.status.display = "Закрыт" тогда
			нстр.значение = СоответствиеСтатусов.Получить("Закрыт");;
		иначе
			нстр.значение = СоответствиеСтатусов.Получить("Открыт");
		конецесли;
	КОнецЕсли;
	
	// Тип задачи
	ТипЗадачи = ДанныеЗадачи.type.display; 
	ДопреквизитНайден = Ложь;
	Для каждого ДопРекв из ПроектнаяЗадача.ДополнительныеРеквизиты цикл
		Если допрекв.свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи") тогда
			Если ТипЗадачи = "Задача" тогда
				допрекв.значение = СоответствиеТиповЗадач.Получить("Задача");
			ИначеЕсли ТипЗадачи = "Story" тогда
				допрекв.значение = СоответствиеТиповЗадач.Получить("История");
			ИначеЕсли ТипЗадачи = "Epic" тогда
				допрекв.значение = СоответствиеТиповЗадач.Получить("Эпик");
			ИначеЕсли ТипЗадачи = "Модификация системы" тогда
				допрекв.значение = СоответствиеТиповЗадач.Получить("Модификация");
			ИначеЕсли ТипЗадачи = "Ошибка" тогда
				допрекв.значение = СоответствиеТиповЗадач.Получить("Ошибка");
			Конецесли;
			
			ДопреквизитНайден = истина;
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	Если ДопреквизитНайден = Ложь Тогда
		нстр = ПроектнаяЗадача.ДополнительныеРеквизиты.Добавить();
		нстр.свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"); 
		Если ТипЗадачи = "Задача" тогда
			нстр.значение = СоответствиеТиповЗадач.Получить("Задача");
		ИначеЕсли ТипЗадачи = "Story" тогда
			нстр.значение = СоответствиеТиповЗадач.Получить("История");
		ИначеЕсли ТипЗадачи = "Epic" тогда
			нстр.значение = СоответствиеТиповЗадач.Получить("Эпик");
		ИначеЕсли ТипЗадачи = "Модификация системы" тогда
			нстр.значение = СоответствиеТиповЗадач.Получить("Модификация");
		ИначеЕсли ТипЗадачи = "Ошибка" тогда
			нстр.значение = СоответствиеТиповЗадач.Получить("Ошибка");
		Конецесли;	
	КОнецЕсли;
	
	//
	
	//kir-17.11.2020 OFIS-32 (
	ЗаполнитьДопПоляПроектнойЗадачи(ПроектнаяЗадача, ДанныеЗадачи);
	//kir-17.11.2020 OFIS-32 )
	
	Попытка 
		ПроектнаяЗадача.Записать();
		УстановитьЗначениеСвойстваОбъекта(ПроектнаяЗадача.Ссылка, ИмяСвойстваДатаИзменения, ДанныеЗадачи.updatedAt);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

//06042020
Функция СтатусРешен()

	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	                                              |	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	                                              |	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	                                              |ИЗ
	                                              |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                                              |ГДЕ
	                                              |	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	                                              |	И ЗначенияСвойствОбъектов.Наименование = ""Решен""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статус"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;
КонецФункции

Функция СтатусЗакрыт()

	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	                                              |	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	                                              |	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	                                              |ИЗ
	                                              |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                                              |ГДЕ
	                                              |	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	                                              |	И ЗначенияСвойствОбъектов.Наименование = ""Закрыт""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статус"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;
КонецФункции

Функция СтатусОткрыт()

	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	                                              |	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	                                              |	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	                                              |ИЗ
	                                              |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                                              |ГДЕ
	                                              |	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	                                              |	И ЗначенияСвойствОбъектов.Наименование = ""Открыт""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статус"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;
КонецФункции

Функция ТипЗадачиЗадача()
		
	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	|	И ЗначенияСвойствОбъектов.Наименование = ""Задача""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;

КонецФункции

Функция ТипЗадачиStory()
		
	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	|	И ЗначенияСвойствОбъектов.Наименование = ""Пользовательская история""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;

КонецФункции

Функция ТипЗадачиModify()
		
	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	|	И ЗначенияСвойствОбъектов.Наименование = ""Модификация системы""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;

КонецФункции

Функция ТипЗадачиОшибка()
		
	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	|	И ЗначенияСвойствОбъектов.Наименование = ""Ошибка""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;

КонецФункции

Функция ТипЗадачиЭпик()
		
	ЗапросДоступныхЗначенийСвойств = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &СвойствоДопРеквизита
	|	И ЗначенияСвойствОбъектов.Наименование = ""Эпик""");
	ЗапросДоступныхЗначенийСвойств.УстановитьПараметр("СвойствоДопРеквизита", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип задачи"));
	Выгрузка = ЗапросДоступныхЗначенийСвойств.Выполнить().Выгрузить();
	если выгрузка.Количество() <> 0 тогда
		Возврат выгрузка[0].ссылка;
	иначе
		возврат null;
	конецесли;

КонецФункции

//

Функция ПолучитьПроектнуюЗадачуПоРодителю(ИмяСвойства, ЗначениеСвойства, Родитель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Свойство", ПолучитьСвойствоОбъекта(ИмяСвойства));
	Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект.Родитель = &Родитель
	               |	И ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение = &Значение";
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Объект.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция УстановитьЗначениеСвойстваОбъекта(СсылкаНаОбъект, ИмяСвойства, ЗначениеСвойства)
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);
	
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		ВызватьИсключение СтрШаблон("Отсутствует ПВХ свойство [%1]", ИмяСвойства);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		//Свойство уже есть, перезаполняем значение
		Запись = НаборЗаписей[0];
		Запись.Значение = ЗначениеСвойства;
		НаборЗаписей.Записать();
	Иначе
		//Создаем новую запись в регистре
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = СсылкаНаОбъект;
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Значение = ЗначениеСвойства;
		НоваяЗапись.Записать();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойствоОбъекта(Знач ИмяСвойства)
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
		
	Возврат Свойство;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъекта(Знач Ссылка, Знач ИмяСвойства)
	
	Свойство = ПолучитьСвойствоОбъекта(ИмяСвойства);
	
	Отбор = Новый Структура(
		"Объект, Свойство",
		Ссылка,
		Свойство
	);
	
	ЗначенияРесурсов = РегистрыСведений.ДополнительныеСведения.Получить(Отбор);
	
	Значение = ЗначенияРесурсов.Значение;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьОбъектПоЗначениюСвойство(Знач ИмяСвойства, Знач ЗначениеСвойства)
	
	Свойство = ПолучитьСвойствоОбъекта(ИмяСвойства);

	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
	 Запрос.УстановитьПараметр("Идентификатор", ЗначениеСвойства);
	 Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ДополнительныеСведения.Объект КАК Объект,
	 |	ДополнительныеСведения.Свойство КАК Свойство,
	 |	ДополнительныеСведения.Значение КАК Значение
	 |ИЗ
	 |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	 |ГДЕ
	 |	ДополнительныеСведения.Свойство.Наименование = &Наименование
	 |	И ДополнительныеСведения.Значение = &Идентификатор";
	 
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Если Результат.Следующий() Тогда
		 Возврат Результат.Объект;
	 КонецЕсли;
	 
	 Возврат Неопределено;	 

 КонецФункции
 
Функция ОбъектУжеЗагружен(ИмяСвойства, ЗначениеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
	Запрос.УстановитьПараметр("Идентификатор", ЗначениеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Наименование
	               |	И ДополнительныеСведения.Значение = &Идентификатор";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

//kir-17.11.2020 OFIS-32 (
Процедура ЗаполнитьДопПоляПроектнойЗадачи(Задача, ДанныеЗадачи)
	
	Если ТипЗнч(Задача) <> Тип("СправочникОбъект.ПроектныеЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
	
	//заполним план трудозатрат
	ЗначениеСвойства = Неопределено;
	Если НЕ ДанныеЗадачи.Свойство("originalEstimation", ЗначениеСвойства) Тогда
		ДанныеЗадачи.Свойство("estimation", ЗначениеСвойства);
	КонецЕсли;
	
	Если ЗначениеСвойства <> Неопределено Тогда
		Секунд = ПереводВремениИзСтрокиВСекунды(ЗначениеСвойства);
		Задача.ТекущийПланТрудозатраты = Окр(Секунд / 3600, 2);
		Задача.ТекущийПланЕдиницаТрудозатрат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
	КонецЕсли;
	
	//заполним дату начала
	ЗначениеСвойства = Неопределено;
	ДанныеЗадачи.Свойство("start", ЗначениеСвойства);
	Если ЗначениеСвойства = Неопределено Тогда
		ДатаНачала = '00010101';
	Иначе
		ДатаНачала = Дата(СтрЗаменить(ЗначениеСвойства, "-", ""))
	КонецЕсли;
	
	//заполним дату окончания
	ЗначениеСвойства = Неопределено;
	ДанныеЗадачи.Свойство("end", ЗначениеСвойства);
	Если ЗначениеСвойства = Неопределено Тогда
		ДатаОкончания = '00010101';
	Иначе
		ДатаОкончания = Дата(СтрЗаменить(ЗначениеСвойства, "-", ""))
	КонецЕсли;
	
	Если Задача.Ссылка = Справочники.ПроектныеЗадачи.ПустаяСсылка() Тогда
		Задача.ОбменДанными.Загрузка = Истина;
		Задача.Записать();
	КонецЕсли;
	
	Рег = РегистрыСведений.СрокиПроектныхЗадач.СоздатьНаборЗаписей();
	Рег.Отбор.ПроектнаяЗадача.Установить(Задача.Ссылка);
	Рег.Прочитать();
	фЕстьЗаписи = Ложь;
	Для Каждого текЗапись Из Рег Цикл
		фЕстьЗаписи = Истина;
		текЗапись.ТекущийПланНачало = ДатаНачала;
		текЗапись.ТекущийПланОкончание = ДатаОкончания;
		текЗапись.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Час;
		текЗапись.ТекущийПланДлительность = (текЗапись.ТекущийПланОкончание - текЗапись.ТекущийПланНачало) / 3600;
	КонецЦикла;
	Если Не фЕстьЗаписи Тогда
		текЗапись = Рег.Добавить();
		текЗапись.ПроектнаяЗадача = Задача.Ссылка;
		текЗапись.ТекущийПланНачало = ДатаНачала;
		текЗапись.ТекущийПланОкончание = ДатаОкончания;
		текЗапись.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Час;
		текЗапись.ТекущийПланДлительность = (текЗапись.ТекущийПланОкончание - текЗапись.ТекущийПланНачало) / 3600;
	КонецЕсли;
	
	Рег.Записать();
	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

//строка вида P1W4DT5H6M2S должна быть преобразована в 1 неделю 4 дня 5 часов 6 минут 2 секунды. Буквы P и D служебные.
Функция ПереводВремениИзСтрокиВСекунды(стрВремя)
	
	Секунд = 0;
	
	//удалим служеюный символ, если есть
	стрСтрока = ?(Лев(стрВремя,1) = "P", Сред(стрВремя,2), стрВремя);
	
	//заполним недели
	поз = стрНайти(стрСтрока, "W");
	Если поз > 0 Тогда
		КолвоНедель = Число(Лев(стрСтрока, поз - 1));
		Секунд = Секунд + КолвоНедель * 86400 * 7 / 3; //делим на 3, потому что в сутках работаем не 24 часа, а 8
		стрСтрока = Сред(стрСтрока, поз + 1);
	КонецЕсли;
	
	//заполним дни
	поз = стрНайти(стрСтрока, "D");
	Если поз > 0 Тогда
		КолвоДней = Число(Лев(стрСтрока, поз - 1));
		Секунд = Секунд + КолвоДней * 86400 / 3; //делим на 3, потому что в сутках работаем не 24 часа, а 8
		стрСтрока = Сред(стрСтрока, поз + 1);
	КонецЕсли;
	
	//удалим служеюный символ, если есть
	стрСтрока = ?(Лев(стрСтрока,1) = "T", Сред(стрСтрока,2), стрСтрока);
	
	//заполним часы
	поз = стрНайти(стрСтрока, "H");
	Если поз > 0 Тогда
		КолвоЧасов = Число(Лев(стрСтрока, поз - 1));
		Секунд = Секунд + КолвоЧасов * 3600;
		стрСтрока = Сред(стрСтрока, поз + 1);
	КонецЕсли;
	
	//заполним часы
	поз = стрНайти(стрСтрока, "M");
	Если поз > 0 Тогда
		КолвоМинут = Число(Лев(стрСтрока, поз - 1));
		Секунд = Секунд + КолвоМинут * 60;
		стрСтрока = Сред(стрСтрока, поз + 1);
	КонецЕсли;
	
	//заполним часы
	поз = стрНайти(стрСтрока, "S");
	Если поз > 0 Тогда
		КолвоСекунд = Число(Лев(стрСтрока, поз - 1));
		Секунд = Секунд + КолвоСекунд;
		стрСтрока = Сред(стрСтрока, поз + 1);
	КонецЕсли;
	
	Возврат Секунд;
	
КонецФункции
//kir-17.11.2020 OFIS-32 )

